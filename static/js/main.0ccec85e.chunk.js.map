{"version":3,"sources":["components/Question.js","components/SuitabilityTest.js","App.js","serviceWorker.js","index.js"],"names":["Question","question","toggleAnswerId","useState","value","setValue","FormControl","style","display","margin","FormLabel","text","RadioGroup","onChange","event","answerId","parseInt","target","answers","map","answer","index","FormControlLabel","id","control","Radio","label","SuitabilityTest","questions","setQuestions","answerIds","indexOf","splice","push","useEffect","fetch","process","then","response","json","onSubmit","preventDefault","method","headers","body","JSON","stringify","submission","userId","type","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0QA4BeA,EArBE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAAqB,EACvBC,mBAAS,GADc,mBAC1CC,EAD0C,KACnCC,EADmC,KASjD,OACE,kBAACC,EAAA,EAAD,CAAaC,MAAO,CAAEC,QAAS,QAASC,OAAQ,KAC9C,kBAACC,EAAA,EAAD,KAAYT,EAASU,MACrB,kBAACC,EAAA,EAAD,CAAYR,MAAOA,EAAOS,SATT,SAACC,GACpB,IAAMC,EAAWC,SAASF,EAAMG,OAAOb,OACvCC,EAASU,GACTb,EAAea,KAOVd,EAASiB,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACpB,kBAACC,EAAA,EAAD,CAAkBlB,MAAOgB,EAAOG,GAAIC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAON,EAAOT,aC2BjEgB,EA7CS,WAAO,IAAD,EACMxB,mBAAS,IADf,mBACrByB,EADqB,KACVC,EADU,OAEM1B,mBAAS,IAFf,mBAErB2B,EAFqB,KAItB5B,GAJsB,KAIL,SAACa,GACtB,IAAMM,EAAQS,EAAUC,QAAQhB,GAE5BM,GAAS,EACXS,EAAUE,OAAOX,EAAO,GAExBS,EAAUG,KAAKlB,KAInBmB,qBAAU,WACRC,MAAMC,sEACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OACxBF,MAAK,SAAAT,GACJC,EAAaD,WAGlB,IAgBH,OACE,0BAAMY,SAfa,SAAC1B,GACpBA,EAAM2B,iBACNN,MAAMC,uEAAiE,CACrEM,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,WAAY,CACVjB,YACAkB,OAAQ,SAQXpB,EAAUT,KAAI,SAAClB,EAAUoB,GAAX,OAAqB,kBAAC,EAAD,CAAUpB,SAAUA,EAAUC,eAAgBA,OAClF,4BAAQ+C,KAAK,QAAQ1C,MAAO,CAAEE,OAAQ,KAAtC,YC9BSyC,MATf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ccec85e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst Question = ({ question, toggleAnswerId }) => {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event) => {\n    const answerId = parseInt(event.target.value);\n    setValue(answerId);\n    toggleAnswerId(answerId);\n  };\n\n  return (\n    <FormControl style={{ display: 'block', margin: 20 }}>\n      <FormLabel>{question.text}</FormLabel>\n      <RadioGroup value={value} onChange={handleChange}>\n        {question.answers.map((answer, index) => \n          <FormControlLabel value={answer.id} control={<Radio />} label={answer.text} />\n        )}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default Question;\n","import React, { useEffect, useState } from 'react';\nimport Question from './Question';\n\nconst SuitabilityTest = () => {\n  const [questions, setQuestions] = useState([]);\n  const [answerIds, setAnswerIds] = useState([]);\n\n  const toggleAnswerId = (answerId) => {\n    const index = answerIds.indexOf(answerId);\n\n    if (index > -1) {\n      answerIds.splice(index, 1);\n    } else {\n      answerIds.push(answerId);\n    }\n  }\n\n  useEffect(() => {\n    fetch(process.env.REACT_APP_API_URL + '/questionnaires/1/questions')\n      .then(response => response.json()\n        .then(questions => {\n          setQuestions(questions);\n        })\n      );\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    fetch(process.env.REACT_APP_API_URL + '/questionnaires/1/submissions', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        submission: {\n          answerIds,\n          userId: 1,\n        },\n      }),\n    })\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {questions.map((question, index) => <Question question={question} toggleAnswerId={toggleAnswerId} />)}\n      <button type=\"sumit\" style={{ margin: 20 }}>Submit</button>\n    </form>\n  );\n}\n\nexport default SuitabilityTest;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport SuitabilityTest from './components/SuitabilityTest';\n\nfunction App() {\n  return (\n    <div>\n      <CssBaseline />\n      <SuitabilityTest />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}